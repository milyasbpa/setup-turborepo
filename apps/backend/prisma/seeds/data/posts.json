[
  {
    "title": "Welcome to Our Platform",
    "content": "This is the first post on our platform. We are excited to have you here! Our platform provides a comprehensive solution for modern web development with TypeScript, Prisma, and PostgreSQL.\n\nWe've built this platform with developers in mind, focusing on:\n- Type safety with TypeScript\n- Database management with Prisma\n- Scalable architecture\n- Developer experience\n\nFeel free to explore all the features and let us know what you think!",
    "slug": "welcome-to-our-platform",
    "published": true,
    "authorEmail": "admin@example.com",
    "tags": ["welcome", "announcement", "platform"],
    "excerpt": "Welcome message for new users joining our platform with an overview of key features."
  },
  {
    "title": "Getting Started with TypeScript",
    "content": "TypeScript is a powerful programming language that builds on JavaScript by adding static type definitions. In this comprehensive guide, we'll explore:\n\n## Why TypeScript?\n- Static typing catches errors at compile time\n- Better IDE support with IntelliSense\n- Improved code maintainability\n- Enhanced developer productivity\n\n## Setting Up TypeScript\n```bash\nnpm install -g typescript\ntsc --init\n```\n\n## Basic Types\n```typescript\nlet message: string = 'Hello, TypeScript!';\nlet count: number = 42;\nlet isActive: boolean = true;\n```\n\nTypeScript transforms the way we write JavaScript by providing compile-time type checking and modern language features.",
    "slug": "getting-started-with-typescript",
    "published": true,
    "authorEmail": "john.doe@example.com",
    "tags": ["typescript", "programming", "tutorial", "javascript"],
    "excerpt": "A comprehensive guide to getting started with TypeScript development and its benefits."
  },
  {
    "title": "Building Scalable APIs with Prisma",
    "content": "In this post, we will explore how to build scalable APIs using Prisma ORM. Prisma is a modern database toolkit that makes database access easy with type safety and auto-completion.\n\n## Key Features of Prisma\n- Type-safe database client\n- Auto-generated migrations\n- Powerful query engine\n- Database introspection\n- Multi-database support\n\n## Schema Definition\n```prisma\nmodel User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  username  String?  @unique\n  posts     Post[]\n  createdAt DateTime @default(now())\n}\n```\n\n## Generated Client Usage\n```typescript\nconst user = await prisma.user.create({\n  data: {\n    email: 'user@example.com',\n    username: 'username'\n  }\n});\n```\n\nPrisma simplifies database operations while maintaining type safety throughout your application.",
    "slug": "building-scalable-apis-with-prisma",
    "published": false,
    "authorEmail": "john.doe@example.com",
    "tags": ["prisma", "api", "database", "orm", "typescript"],
    "excerpt": "Learn how to create robust and scalable APIs using Prisma ORM with TypeScript."
  },
  {
    "title": "Modern React Development Patterns",
    "content": "React has evolved significantly over the years. Let's explore modern patterns and best practices for React development in 2024.\n\n## React Hooks\nHooks have revolutionized how we write React components:\n- useState for state management\n- useEffect for side effects\n- useContext for prop drilling solutions\n- Custom hooks for reusable logic\n\n## Component Composition\n```jsx\nfunction App() {\n  return (\n    <Layout>\n      <Header />\n      <Main>\n        <Sidebar />\n        <Content />\n      </Main>\n      <Footer />\n    </Layout>\n  );\n}\n```\n\n## Performance Optimization\n- React.memo for component memoization\n- useMemo for expensive calculations\n- useCallback for function memoization\n- Code splitting with React.lazy\n\nStay tuned for more advanced patterns and techniques!",
    "slug": "modern-react-development-patterns",
    "published": true,
    "authorEmail": "jane.smith@example.com",
    "tags": ["react", "javascript", "frontend", "hooks", "performance"],
    "excerpt": "Explore modern React development patterns and best practices for building efficient applications."
  },
  {
    "title": "Database Design Best Practices",
    "content": "Designing a good database schema is crucial for application performance and maintainability. Here are key principles to follow:\n\n## Normalization\n- First Normal Form (1NF): Eliminate duplicate columns\n- Second Normal Form (2NF): Remove partial dependencies\n- Third Normal Form (3NF): Remove transitive dependencies\n\n## Indexing Strategy\n```sql\n-- Primary key index (automatic)\nCREATE INDEX idx_user_email ON users(email);\n\n-- Composite index for common queries\nCREATE INDEX idx_post_author_status ON posts(author_id, published);\n```\n\n## Relationships\n- One-to-Many: User -> Posts\n- Many-to-Many: Posts -> Tags (with junction table)\n- One-to-One: User -> Profile\n\n## Performance Considerations\n- Use appropriate data types\n- Implement proper constraints\n- Plan for scalability\n- Consider query patterns\n\nA well-designed database is the foundation of a performant application.",
    "slug": "database-design-best-practices",
    "published": false,
    "authorEmail": "bob.wilson@example.com",
    "tags": ["database", "sql", "design", "performance", "postgresql"],
    "excerpt": "Essential database design principles and best practices for scalable applications."
  }
]
