// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for math learning app
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?  @unique
  firstName   String?
  lastName    String?
  displayName String?
  avatar      String?
  
  // Authentication fields (for future expansion)
  password    String?
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // Math learning specific fields
  totalXp     Int      @default(0)
  currentStreak Int    @default(0)
  bestStreak  Int      @default(0)
  lastActivityDate DateTime?
  
  // Metadata
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  submissions Submission[]
  userProgress UserProgress[]
  
  @@map("users")
}

// Lessons table
model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      @unique
  isActive    Boolean  @default(true)
  
  // Lesson metadata
  xpReward    Int      @default(10) // XP per problem
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  problems    Problem[]
  userProgress UserProgress[]
  submissions Submission[]
  
  @@map("lessons")
}

// Problems within lessons
model Problem {
  id          String   @id @default(cuid())
  lessonId    String
  question    String
  problemType String   // "multiple_choice" or "input"
  order       Int
  
  // For input type problems
  correctAnswer String?
  
  // Problem metadata
  explanation String?
  difficulty  String   @default("easy") // easy, medium, hard
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  options     ProblemOption[]
  submissions Submission[]
  
  @@unique([lessonId, order])
  @@map("problems")
}

// Options for multiple choice problems
model ProblemOption {
  id          String   @id @default(cuid())
  problemId   String
  optionText  String
  isCorrect   Boolean  @default(false)
  order       Int
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  @@unique([problemId, order])
  @@map("problem_options")
}

// User submissions for problems
model Submission {
  id          String   @id @default(cuid())
  attemptId   String   @unique // For idempotency
  userId      String
  lessonId    String
  problemId   String
  
  // Submission data
  userAnswer  String
  isCorrect   Boolean
  xpEarned    Int      @default(0)
  timeSpent   Int?     // in seconds
  
  // Timestamps
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  @@index([userId, lessonId])
  @@index([attemptId])
  @@map("submissions")
}

// User progress tracking
model UserProgress {
  id              String   @id @default(cuid())
  userId          String
  lessonId        String
  
  // Progress data
  isCompleted     Boolean  @default(false)
  completionDate  DateTime?
  score           Float    @default(0) // percentage score
  bestScore       Float    @default(0)
  attemptsCount   Int      @default(0)
  totalXpEarned   Int      @default(0)
  
  // Timestamps
  startedAt       DateTime @default(now())
  lastAttemptAt   DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson          Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@index([userId])
  @@map("user_progress")
}
