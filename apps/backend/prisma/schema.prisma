// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with comprehensive fields
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?  @unique
  firstName   String?
  lastName    String?
  displayName String?
  avatar      String?
  bio         String?
  
  // Authentication fields
  password    String?
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // OAuth fields
  googleId    String?  @unique
  githubId    String?  @unique
  
  // Metadata
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  profiles    UserProfile[]
  posts       Post[]
  comments    Comment[]
  
  @@map("users")
}

// User profile for additional information
model UserProfile {
  id       String @id @default(cuid())
  userId   String
  provider String // "local", "google", "github", etc.
  
  // Provider specific data
  providerData Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, provider])
  @@map("user_profiles")
}

// Example content models to demonstrate relationships
model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  slug      String   @unique
  published Boolean  @default(false)
  
  // Author relation
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Content metadata
  tags      String[]
  excerpt   String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  comments  Comment[]
  
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  
  // Relations
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Nested comments
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("comments")
}
