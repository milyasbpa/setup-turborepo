{
  "openapi": "3.0.0",
  "info": {
    "title": "Backend API",
    "version": "1.0.0",
    "description": "A comprehensive Express.js API with TypeScript, Zod validation, and Winston logging",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3002",
      "description": "Development server"
    }
  ],
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "required": [
          "success",
          "error",
          "timestamp"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string",
            "example": "An error occurred"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                }
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-08T01:00:00.000Z"
          }
        }
      },
      "ValidationError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "Validation failed"
              }
            }
          }
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "required": [
          "success",
          "timestamp"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Operation successful"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-08T01:00:00.000Z"
          }
        }
      },
      "PaginationMeta": {
        "type": "object",
        "required": [
          "page",
          "limit",
          "total",
          "totalPages"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "example": 10
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "example": 25
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0,
            "example": 3
          }
        }
      },
      "HealthStatus": {
        "type": "object",
        "required": [
          "status",
          "service",
          "timestamp",
          "uptime",
          "version"
        ],
        "properties": {
          "status": {
            "type": "string",
            "example": "OK",
            "description": "Current health status"
          },
          "service": {
            "type": "string",
            "example": "backend",
            "description": "Service name"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-08T01:00:00.000Z",
            "description": "Health check timestamp"
          },
          "uptime": {
            "type": "number",
            "example": 3600.123,
            "description": "Service uptime in seconds"
          },
          "version": {
            "type": "string",
            "example": "1.0.0",
            "description": "Service version"
          },
          "environment": {
            "type": "string",
            "example": "development",
            "description": "Current environment"
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "healthy",
                    "unhealthy",
                    "degraded"
                  ],
                  "example": "healthy"
                },
                "responseTime": {
                  "type": "number",
                  "example": 15.5
                },
                "lastCheck": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2025-08-08T01:00:00.000Z"
                }
              }
            },
            "description": "Status of service dependencies"
          }
        }
      },
      "HealthResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/HealthStatus"
              }
            }
          }
        ]
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1,
            "description": "Unique user identifier"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "John Doe",
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com",
            "description": "User's email address"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-08T01:00:00.000Z",
            "description": "User creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-08T01:00:00.000Z",
            "description": "User last update timestamp"
          }
        }
      },
      "CreateUser": {
        "type": "object",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "John Doe",
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com",
            "description": "User's email address"
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "John Doe",
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com",
            "description": "User's email address"
          }
        },
        "description": "At least one field must be provided"
      },
      "UserResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        ]
      },
      "UsersListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "pagination": {
                "$ref": "#/components/schemas/PaginationMeta"
              }
            }
          }
        ]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request - Validation Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Health",
      "description": "Health check endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    }
  ],
  "paths": {
    "/api/health": {
      "get": {
        "summary": "Get service health status",
        "description": "Returns the current health status of the service including uptime, version, and dependency status",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "Service health status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                },
                "example": {
                  "success": true,
                  "data": {
                    "status": "OK",
                    "service": "backend",
                    "timestamp": "2025-08-08T01:00:00.000Z",
                    "uptime": 3600.123,
                    "version": "1.0.0",
                    "environment": "development"
                  },
                  "message": "Health check successful",
                  "timestamp": "2025-08-08T01:00:00.000Z"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieve a paginated list of users with optional search and sorting",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter users by name or email"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "email",
                "createdAt"
              ],
              "default": "id"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Create a new user with the provided information",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              },
              "example": {
                "name": "John Doe",
                "email": "john@example.com"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update user by ID",
        "description": "Update a specific user's information",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              },
              "example": {
                "name": "John Smith",
                "email": "johnsmith@example.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete user by ID",
        "description": "Delete a specific user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  }
}