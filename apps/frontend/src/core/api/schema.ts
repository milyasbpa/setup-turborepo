/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/lessons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all lessons
         * @description Retrieve all math lessons with user progress and completion status
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description User ID to get personalized progress (defaults to demo user)
                     * @example 1
                     */
                    userId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lessons retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": true,
                         *       "message": "Lessons retrieved successfully",
                         *       "data": [
                         *         {
                         *           "id": "lesson-1",
                         *           "title": "Basic Arithmetic",
                         *           "description": "Learn addition and subtraction",
                         *           "order": 1,
                         *           "xpReward": 10,
                         *           "isActive": true,
                         *           "progress": {
                         *             "isCompleted": false,
                         *             "score": 0,
                         *             "bestScore": 0,
                         *             "attemptsCount": 0
                         *           }
                         *         }
                         *       ],
                         *       "timestamp": "2025-08-08T01:00:00.000Z"
                         *     } */
                        "application/json": components["schemas"]["LessonListResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/lessons/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get lesson statistics
         * @description Retrieve overall lesson statistics and metrics
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lesson statistics retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": true,
                         *       "message": "Lesson statistics retrieved successfully",
                         *       "data": {
                         *         "totalLessons": 3,
                         *         "activeLessons": 3,
                         *         "averageCompletion": 65.5
                         *       },
                         *       "timestamp": "2025-08-08T01:00:00.000Z"
                         *     } */
                        "application/json": components["schemas"]["SuccessResponse"] & {
                            data?: {
                                /** @example 3 */
                                totalLessons?: number;
                                /** @example 3 */
                                activeLessons?: number;
                                /** @example 65.5 */
                                averageCompletion?: number;
                            };
                        };
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/lessons/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get lesson by ID
         * @description Retrieve a specific lesson with all its problems (frontend-safe, excludes correct answers)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Lesson ID
                     * @example lesson-1
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lesson retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": true,
                         *       "message": "Lesson retrieved successfully",
                         *       "data": {
                         *         "id": "lesson-1",
                         *         "title": "Basic Arithmetic",
                         *         "description": "Learn addition and subtraction",
                         *         "order": 1,
                         *         "xpReward": 10,
                         *         "isActive": true,
                         *         "problems": [
                         *           {
                         *             "id": "problem-1-1",
                         *             "question": "What is 5 + 3?",
                         *             "problemType": "multiple_choice",
                         *             "order": 1,
                         *             "difficulty": "easy",
                         *             "options": [
                         *               {
                         *                 "id": "option-1-1-a",
                         *                 "optionText": "7",
                         *                 "order": 1
                         *               },
                         *               {
                         *                 "id": "option-1-1-b",
                         *                 "optionText": "8",
                         *                 "order": 2
                         *               }
                         *             ]
                         *           }
                         *         ]
                         *       },
                         *       "timestamp": "2025-08-08T01:00:00.000Z"
                         *     } */
                        "application/json": components["schemas"]["LessonResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        /**
         * Submit lesson answers
         * @description Submit answers for a lesson and get results with XP and streak calculation (idempotent)
         */
        post: {
            parameters: {
                query?: {
                    /**
                     * @description User ID (defaults to demo user)
                     * @example 1
                     */
                    userId?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Lesson ID
                     * @example lesson-1
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "attemptId": "attempt-123-456",
                     *       "answers": [
                     *         {
                     *           "problemId": "problem-1-1",
                     *           "answer": "8"
                     *         },
                     *         {
                     *           "problemId": "problem-1-2",
                     *           "answer": "15"
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["SubmitLessonRequest"];
                };
            };
            responses: {
                /** @description Lesson submitted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": true,
                         *       "message": "Lesson submitted successfully",
                         *       "data": {
                         *         "success": true,
                         *         "xpEarned": 40,
                         *         "totalXp": 120,
                         *         "streak": {
                         *           "current": 3,
                         *           "best": 7,
                         *           "updated": true
                         *         },
                         *         "lesson": {
                         *           "completed": true,
                         *           "score": 85,
                         *           "bestScore": 95
                         *         },
                         *         "results": [
                         *           {
                         *             "problemId": "problem-1-1",
                         *             "userAnswer": "8",
                         *             "isCorrect": true,
                         *             "correctAnswer": "8",
                         *             "explanation": "5 + 3 = 8",
                         *             "xpEarned": 10
                         *           }
                         *         ]
                         *       },
                         *       "timestamp": "2025-08-08T01:00:00.000Z"
                         *     } */
                        "application/json": components["schemas"]["SubmitLessonResponseWrapper"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                /** @description Submission already exists (idempotent operation) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile
         * @description Retrieve user profile with math learning stats, XP, streak, and progress
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description User ID to get profile for (defaults to demo user)
                     * @example 1
                     */
                    userId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User profile retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": true,
                         *       "message": "User profile retrieved successfully",
                         *       "data": {
                         *         "id": "1",
                         *         "email": "demo@mathapp.com",
                         *         "username": "mathlearner",
                         *         "firstName": "John",
                         *         "lastName": "Doe",
                         *         "displayName": "John D.",
                         *         "avatar": "https://example.com/avatar.jpg",
                         *         "xp": 250,
                         *         "streak": {
                         *           "current": 7,
                         *           "longest": 15,
                         *           "lastActiveDate": "2025-08-08"
                         *         },
                         *         "lessonsCompleted": 5,
                         *         "totalLessons": 10,
                         *         "rank": "Intermediate",
                         *         "joinedAt": "2025-07-01T00:00:00.000Z"
                         *       },
                         *       "timestamp": "2025-08-08T01:00:00.000Z"
                         *     } */
                        "application/json": components["schemas"]["UserProfileResponse"];
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user learning statistics
         * @description Retrieve detailed user learning statistics including XP, time spent, achievements, and weekly progress
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description User ID to get stats for (defaults to demo user)
                     * @example 1
                     */
                    userId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User statistics retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": true,
                         *       "message": "User statistics retrieved successfully",
                         *       "data": {
                         *         "totalXp": 420,
                         *         "xpThisWeek": 80,
                         *         "xpThisMonth": 250,
                         *         "totalLessonsCompleted": 8,
                         *         "totalProblemsCompleted": 45,
                         *         "averageScore": 87.5,
                         *         "streak": {
                         *           "current": 7,
                         *           "longest": 15,
                         *           "lastActiveDate": "2025-08-08"
                         *         },
                         *         "timeSpent": {
                         *           "totalMinutes": 240,
                         *           "thisWeekMinutes": 60,
                         *           "averagePerSession": 8.5
                         *         },
                         *         "achievements": [
                         *           {
                         *             "id": "first_lesson",
                         *             "title": "First Steps",
                         *             "description": "Complete your first lesson",
                         *             "iconUrl": "https://example.com/badge.png",
                         *             "unlockedAt": "2025-07-15T10:30:00.000Z"
                         *           }
                         *         ],
                         *         "weeklyProgress": [
                         *           {
                         *             "date": "2025-08-08",
                         *             "xpEarned": 25,
                         *             "lessonsCompleted": 2,
                         *             "timeSpent": 15
                         *           }
                         *         ]
                         *       },
                         *       "timestamp": "2025-08-08T01:00:00.000Z"
                         *     } */
                        "application/json": components["schemas"]["UserStatsResponse"];
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get service health status
         * @description Returns the current health status of the service including uptime, version, and dependency status
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service health status retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "success": true,
                         *       "data": {
                         *         "status": "OK",
                         *         "service": "backend",
                         *         "timestamp": "2025-08-08T01:00:00.000Z",
                         *         "uptime": 3600.123,
                         *         "version": "1.0.0",
                         *         "environment": "development"
                         *       },
                         *       "message": "Health check successful",
                         *       "timestamp": "2025-08-08T01:00:00.000Z"
                         *     } */
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users
         * @description Retrieve a paginated list of users with optional search and sorting
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Search term to filter users by name or email */
                    search?: string;
                    /** @description Field to sort by */
                    sortBy?: "id" | "name" | "email" | "createdAt";
                    /** @description Sort order */
                    sortOrder?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Users retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UsersListResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        /**
         * Create a new user
         * @description Create a new user with the provided information
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "name": "John Doe",
                     *       "email": "john@example.com"
                     *     } */
                    "application/json": components["schemas"]["CreateUser"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID
         * @description Retrieve a specific user by their ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        /**
         * Update user by ID
         * @description Update a specific user's information
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "name": "John Smith",
                     *       "email": "johnsmith@example.com"
                     *     } */
                    "application/json": components["schemas"]["UpdateUser"];
                };
            };
            responses: {
                /** @description User updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        /**
         * Delete user by ID
         * @description Delete a specific user
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @example false */
            success: boolean;
            /** @example An error occurred */
            error: string;
            details?: {
                field?: string;
                message?: string;
                code?: string;
            }[];
            /**
             * Format: date-time
             * @example 2025-08-08T01:00:00.000Z
             */
            timestamp: string;
        };
        ValidationError: components["schemas"]["Error"] & {
            /** @example Validation failed */
            error?: string;
        };
        SuccessResponse: {
            /** @example true */
            success: boolean;
            /** @example Operation successful */
            message?: string;
            /**
             * Format: date-time
             * @example 2025-08-08T01:00:00.000Z
             */
            timestamp: string;
        };
        PaginationMeta: {
            /** @example 1 */
            page: number;
            /** @example 10 */
            limit: number;
            /** @example 25 */
            total: number;
            /** @example 3 */
            totalPages: number;
        };
        Lesson: {
            /**
             * @description Unique lesson identifier
             * @example lesson-1
             */
            id: string;
            /**
             * @description Lesson title
             * @example Basic Arithmetic
             */
            title: string;
            /**
             * @description Lesson description
             * @example Learn addition and subtraction basics
             */
            description: string;
            /**
             * @description Lesson order in curriculum
             * @example 1
             */
            order: number;
            /**
             * @description XP reward for completing lesson
             * @example 10
             */
            xpReward: number;
            /**
             * @description Whether lesson is active
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Lesson creation timestamp
             * @example 2025-08-08T01:00:00.000Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Lesson last update timestamp
             * @example 2025-08-08T01:00:00.000Z
             */
            updatedAt: string;
            progress?: components["schemas"]["LessonProgress"];
        };
        LessonProgress: {
            /**
             * @description Whether lesson is completed
             * @example false
             */
            isCompleted: boolean;
            /**
             * @description Current lesson score (0-100)
             * @example 85
             */
            score: number;
            /**
             * @description Best lesson score achieved
             * @example 95
             */
            bestScore: number;
            /**
             * @description Number of attempts made
             * @example 3
             */
            attemptsCount: number;
        };
        Problem: {
            /**
             * @description Unique problem identifier
             * @example problem-1-1
             */
            id: string;
            /**
             * @description The math problem question
             * @example What is 5 + 3?
             */
            question: string;
            /**
             * @description Type of problem interaction
             * @example multiple_choice
             * @enum {string}
             */
            problemType: "multiple_choice" | "input";
            /**
             * @description Problem order in lesson
             * @example 1
             */
            order: number;
            /**
             * @description Problem difficulty level
             * @example easy
             * @enum {string}
             */
            difficulty: "easy" | "medium" | "hard";
            /** @description Multiple choice options (if applicable) */
            options?: components["schemas"]["ProblemOption"][];
        };
        ProblemOption: {
            /**
             * @description Unique option identifier
             * @example option-1-1-a
             */
            id: string;
            /**
             * @description Option text/answer
             * @example 8
             */
            optionText: string;
            /**
             * @description Option display order
             * @example 1
             */
            order: number;
        };
        LessonWithProblems: components["schemas"]["Lesson"] & {
            /** @description List of problems in the lesson */
            problems: components["schemas"]["Problem"][];
        };
        SubmitLessonRequest: {
            /**
             * @description Unique attempt identifier for idempotency
             * @example attempt-123-456
             */
            attemptId: string;
            /** @description List of user answers */
            answers: components["schemas"]["Answer"][];
        };
        Answer: {
            /**
             * @description ID of the problem being answered
             * @example problem-1-1
             */
            problemId: string;
            /**
             * @description User's answer to the problem
             * @example 8
             */
            answer: string;
        };
        SubmitLessonResponse: {
            /**
             * @description Whether submission was successful
             * @example true
             */
            success: boolean;
            /**
             * @description XP earned from this lesson attempt
             * @example 40
             */
            xpEarned: number;
            /**
             * @description User's total XP after this lesson
             * @example 120
             */
            totalXp: number;
            streak: components["schemas"]["StreakInfo"];
            lesson: components["schemas"]["LessonResult"];
            /** @description Detailed results for each problem */
            results: components["schemas"]["ProblemResult"][];
        };
        StreakInfo: {
            /**
             * @description Current daily streak
             * @example 3
             */
            current: number;
            /**
             * @description Best streak achieved
             * @example 7
             */
            best: number;
            /**
             * @description Whether streak was updated with this lesson
             * @example true
             */
            updated: boolean;
        };
        LessonResult: {
            /**
             * @description Whether lesson was completed
             * @example true
             */
            completed: boolean;
            /**
             * @description Score for this attempt (0-100)
             * @example 85
             */
            score: number;
            /**
             * @description Best score achieved for this lesson
             * @example 95
             */
            bestScore: number;
        };
        ProblemResult: {
            /**
             * @description ID of the problem
             * @example problem-1-1
             */
            problemId: string;
            /**
             * @description User's submitted answer
             * @example 8
             */
            userAnswer: string;
            /**
             * @description Whether the answer was correct
             * @example true
             */
            isCorrect: boolean;
            /**
             * @description The correct answer
             * @example 8
             */
            correctAnswer: string;
            /**
             * @description Explanation of the solution
             * @example 5 + 3 = 8. Addition combines two numbers.
             */
            explanation: string;
            /**
             * @description XP earned for this problem
             * @example 10
             */
            xpEarned: number;
        };
        LessonListResponse: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["Lesson"][];
        };
        LessonResponse: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["LessonWithProblems"];
        };
        SubmitLessonResponseWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["SubmitLessonResponse"];
        };
        UserProfile: {
            /**
             * @description Unique user identifier
             * @example 1
             */
            id: string;
            /**
             * Format: email
             * @description User's email address
             * @example demo@mathapp.com
             */
            email: string;
            /**
             * @description User's username
             * @example mathlearner
             */
            username: string | null;
            /**
             * @description User's first name
             * @example John
             */
            firstName: string | null;
            /**
             * @description User's last name
             * @example Doe
             */
            lastName: string | null;
            /**
             * @description User's display name
             * @example John D.
             */
            displayName: string | null;
            /**
             * @description User's avatar URL
             * @example https://example.com/avatar.jpg
             */
            avatar: string | null;
            /**
             * @description User's total experience points
             * @example 250
             */
            xp: number;
            streak: components["schemas"]["UserStreak"];
            /**
             * @description Number of completed lessons
             * @example 5
             */
            lessonsCompleted: number;
            /**
             * @description Total number of available lessons
             * @example 10
             */
            totalLessons: number;
            /**
             * @description User's current rank based on XP
             * @example Beginner
             */
            rank: string;
            /**
             * Format: date-time
             * @description Date when user joined
             * @example 2025-07-01T00:00:00.000Z
             */
            joinedAt: string;
        };
        UserStreak: {
            /**
             * @description Current daily learning streak
             * @example 7
             */
            current: number;
            /**
             * @description Longest streak ever achieved
             * @example 15
             */
            longest: number;
            /**
             * Format: date
             * @description Last date user was active
             * @example 2025-08-08
             */
            lastActiveDate: string | null;
        };
        UserStats: {
            /**
             * @description Total experience points earned
             * @example 420
             */
            totalXp: number;
            /**
             * @description XP earned this week
             * @example 80
             */
            xpThisWeek: number;
            /**
             * @description XP earned this month
             * @example 250
             */
            xpThisMonth: number;
            /**
             * @description Total lessons completed
             * @example 8
             */
            totalLessonsCompleted: number;
            /**
             * @description Total problems solved
             * @example 45
             */
            totalProblemsCompleted: number;
            /**
             * @description Average score across all lessons
             * @example 87.5
             */
            averageScore: number;
            streak: components["schemas"]["UserStreak"];
            timeSpent: components["schemas"]["TimeSpent"];
            /** @description List of user achievements */
            achievements: components["schemas"]["Achievement"][];
            /** @description Progress for each day of the current week */
            weeklyProgress: components["schemas"]["DailyProgress"][];
        };
        TimeSpent: {
            /**
             * @description Total time spent learning (minutes)
             * @example 240
             */
            totalMinutes: number;
            /**
             * @description Time spent this week (minutes)
             * @example 60
             */
            thisWeekMinutes: number;
            /**
             * @description Average time per learning session (minutes)
             * @example 8.5
             */
            averagePerSession: number;
        };
        Achievement: {
            /**
             * @description Achievement identifier
             * @example first_lesson
             */
            id: string;
            /**
             * @description Achievement title
             * @example First Steps
             */
            title: string;
            /**
             * @description Achievement description
             * @example Complete your first lesson
             */
            description: string;
            /**
             * @description Achievement icon URL
             * @example https://example.com/badge.png
             */
            iconUrl: string;
            /**
             * Format: date-time
             * @description When achievement was unlocked
             * @example 2025-07-15T10:30:00.000Z
             */
            unlockedAt: string;
        };
        DailyProgress: {
            /**
             * Format: date
             * @description Date of progress
             * @example 2025-08-08
             */
            date: string;
            /**
             * @description XP earned on this date
             * @example 25
             */
            xpEarned: number;
            /**
             * @description Lessons completed on this date
             * @example 2
             */
            lessonsCompleted: number;
            /**
             * @description Time spent learning (minutes)
             * @example 15
             */
            timeSpent: number;
        };
        UserProfileResponse: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["UserProfile"];
        };
        UserStatsResponse: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["UserStats"];
        };
        HealthStatus: {
            /**
             * @description Current health status
             * @example OK
             */
            status: string;
            /**
             * @description Service name
             * @example backend
             */
            service: string;
            /**
             * Format: date-time
             * @description Health check timestamp
             * @example 2025-08-08T01:00:00.000Z
             */
            timestamp: string;
            /**
             * @description Service uptime in seconds
             * @example 3600.123
             */
            uptime: number;
            /**
             * @description Service version
             * @example 1.0.0
             */
            version: string;
            /**
             * @description Current environment
             * @example development
             */
            environment?: string;
            /** @description Status of service dependencies */
            dependencies?: {
                [key: string]: {
                    /**
                     * @example healthy
                     * @enum {string}
                     */
                    status?: "healthy" | "unhealthy" | "degraded";
                    /** @example 15.5 */
                    responseTime?: number;
                    /**
                     * Format: date-time
                     * @example 2025-08-08T01:00:00.000Z
                     */
                    lastCheck?: string;
                };
            };
        };
        HealthResponse: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["HealthStatus"];
        };
        User: {
            /**
             * Format: int64
             * @description Unique user identifier
             * @example 1
             */
            id: number;
            /**
             * @description User's full name
             * @example John Doe
             */
            name: string;
            /**
             * Format: email
             * @description User's email address
             * @example john@example.com
             */
            email: string;
            /**
             * Format: date-time
             * @description User creation timestamp
             * @example 2025-08-08T01:00:00.000Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description User last update timestamp
             * @example 2025-08-08T01:00:00.000Z
             */
            updatedAt: string;
        };
        CreateUser: {
            /**
             * @description User's full name
             * @example John Doe
             */
            name: string;
            /**
             * Format: email
             * @description User's email address
             * @example john@example.com
             */
            email: string;
        };
        /** @description At least one field must be provided */
        UpdateUser: {
            /**
             * @description User's full name
             * @example John Doe
             */
            name?: string;
            /**
             * Format: email
             * @description User's email address
             * @example john@example.com
             */
            email?: string;
        };
        UserResponse: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["User"];
        };
        UsersListResponse: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["User"][];
            pagination?: components["schemas"]["PaginationMeta"];
        };
    };
    responses: {
        /** @description Bad Request - Validation Error */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ValidationError"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal Server Error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
